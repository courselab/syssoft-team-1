*Exercício 01*

p1

"	
	Execute it a few times and explain the results.
	Explain didactically what the rationale for this behaviour is
									"

Sempre que executamos o código, o endereço de memória printado da main é o mesmo. Isso ocorre, 
pois, em sistemas ELF, o endereço de executáveis "normais" é sempre o mesmo na hora da compilação. 
É possível, no entando, sobrescrever esse endereço padrão utilizando o ASLR (Address Space Layout 
Randomization).


*Exercício 02*

p2

"
	Understand how the program works
						"

O programa pede por uma senha, armazena o input do usuário em uma string de 10 caracteres, compara 
essa string com "foo" e, se for igual, atualiza a flag "verified" para conceder acesso ao código 
protegido. Caso seja diferente, ele encerra o programa com a mensagem de erro "Acesso negado".


"
	Then, rerun p2 and, when prompted, enter: youshallnotpass.
	
	Explain the result and identify the design flaw that led to the
		vulnerability.
										"

Como resultado, tem-se que, ao fornecer a senha errada "youshallnotpass", o programa aceita ela 
como verdadeira e fornece acesso ao código protegido. Isso acontece, pois, durante a etapa de 
scanf, a senha fornecida estoura o limite de 10 caracteres da varíavel "user_key". Quando 
"disassemblamos" esse código, podemos ver que o caracter excedente invade o espaço de memória da 
flag "verified", que é utilizada para garantir o acesso ao código protegido.Como resultado, o 
programa permite a entrada com senhas diferentes da orginal.Esse problema é conhecido como 
bufferflow vulnerability.


"
	Let's say your compiler does not implement stack protection
	    (shame on it). Discuss possible modifications in the source code
	     to make the program more robust with regard to buffer overflow.
										"

Em primeiro lugar, é importante ressaltar que o "stack protector" é um mecanismo de defesa que 
impede que esse tipo de erro aconteça. Para esse caso em específico, a solução é chamada de "stack 
canary".

Para fortalecer esse código, podem ser feitas algumas coisas. A primeira delas, é limitar o 
tamanho do input do usuário durante a função scanf. Isso pode ser feito substituindo "%s" por 
"%9s" ( 9 caracteres + \0 ). Outra coisa que pode ser feita é, ao invés de utilizar uma flag para 
verificar o acesso, chamar uma função com o código protegido a partir da verificação. Dessa forma, 
a string de 10 carcteres não deve ter overflow, e, mesmo que tenha, não existirá variável para ser 
preenchida.


"
	Apply those modifications in a new program p2fix.c, and edit
             the Makefile to build it (you can't use -fstack-protector).

             Test the program and comment on the results.
										"

As alterações mencionadas previamente foram implementadas no código p2fix.c. Seus comandos de 
compilação e clean foram adicionados no Makefile. Como esperado, ao tentar acessar o código com a 
senha certa, ele autoriza sua entreda, e ao tentar usar a senha errada, ele bloqueia.



*Exercício 03*

p3


Após "desassemblar" o programa,	foi possível perceber que o código gerado é extremamente similar ao
fornecido de exemplo. Para fins	de simplicidade na explicação, vão ser utilizados os endereços de 
memória do exemplo nas respostas.

"
	a) Locate the line where 'foo' calls 'bar' and explain how the
                caller passes the parameter to the callee. In your answer,
                clarify the concepts of calling convention and application
                binary interface.
										"
 

a) Dado a complexidade de um sistema operacional, foi criadas "convenções de chamada", para 
padronizar o processo de desenvolvimento de código de baixo nível. Para isso, foram criadas ABIs 
(Interface Binária de Aplicação). Como paralelo, elas fazem para o assembly o que APIs fazem 
para o "alto nível". Na prática, ABIs definem convenções de implementação para componentes 
funcionais do sistema. Nessa linha, o código "desassemblado" também utiliza essas convenções
para realizar a chamada e passagem de parâmetros da funções. A função "foo" chama a função
"bar" na linha "80491af". Para realizar a passagem de parâmetros, a função "foo" utiliza 
 o registrador volátil eax para armazenar n+1, e adiciona (push) ele na pilha.

"
	b) How 'bar' returns its result to 'foo'? How does the answer
                relate to what you discussed in item (a)? Is it a linux-only
                thing?
										"


b) A função "bar" retorna esse valor para "foo" na linha "80491ce", através da adição do resultado
m+1 no registrador eax. Isso se relaciona com o item a, pois a ABI define que valores de retorno
vão para o registrador eax. Não, isso não é exclusivo do linux.


"
	c) Explain what is the purpose of the first two instruction and
                the second-to-last instruction of the function 'foo'. Give a
                didactic overview of what they do and what would happen if
                they were suppressed? Are they always necessary, or can they
                be omitted in some circumstances?
										"

c) As primeiras duas instruções de foo são responsáveis por criar um ponto de referência
para as variáveis locais, através da criação de um "stack frame" novo. a penúltima instrução
volta o "stack frame" anterior. Caso essa etapa seja pulada, não seria possível manter um
controle bom das variáveis locais. Elas podem ser emitidas em funções que finais (folhas), onde
o código acaba.


"
	d) What is the purpose of the third line in both functions 'foo'
                and 'bar' and what does it have to do with the x86 ABI? Does it
                serve the same purpose than the third line of 'main'? Explain
                didactically how those pieces of code work.
										"


d) A terceira linha nas funções "foo" e "bar" é responsável por alocar espaço para as 
variáveis locais. Ela se relaciona com a ABI x86 por conta da forma como o stack funciona
(de cima para baixo). A terceira linha da "main" é responsável por alinhar a pilha no 
padrão 16 bytes, definido pela ABI x86.


"
	e) In the source code, change the return type of 'bar' to 'char'.
                Rebuild p3 and examine the difference in the disassembly of
                'foo'. Explain what the compiler did and, based on your answer,
                discuss why the declaration of 'foo' and 'bar' before 'main'
                are useful.
										"

e) A diferença principal está na linha "80491cb", onde ele utiliza o registrado al ao invés de
eax. Isso acontece, pois al é padrão para retornos em char. A importância de declarar as funções
"foo" e "bar" antes da "main", é a de garantir que o compilador vai usar as convenções de chamada e
padrões de retorno corretos.




*Exercício 04*

p4

"
	a) Execute each program like this

                ./p4-v1
                ./p4-v2
                ./p4-v3

                and comment the results. Modify the Makefile so that all four
                programs produce the same desired result, no matter from where
                tey are invoked (e.g. from outside the original directory).
											"

a) Ao executar os programas dessa forma, o programa v1 e v2(compilados estaticamente) fornecem o 
resultado esperado (foo). Contudo, o programa v3 fornece o erro: "./p4-v3: error while loading 
shared libraries: libp4.so: cannot open shared object file: No such file or directory." Isso 
acontece, pois o linker dinâmico não sabe onde procurar as suas dependências. Uma solução 
temporária é fornecer esse diretório manualmente: "LD_LIBRARY_PATH=. ./p4-v3"

Para resolver esse problema, é preciso adicionar esse comando no makefile do p4-v3: "-fpic -fpie 
-Wl,-rpath=\$ORIGIN" isso passa o endereço das dependências para o executável durante a 
compliação.Como resultado, todos os 3 programas, invocados de qualquer lugar, apresentam o 
resultado esperado: "foo".


"
	b) Compare the size of all programs and explain the differences.
										"

b) Seguem os tamanhos:
	-p4-v1 : 11572 bytes
	-p4-v2 : 11528 bytes
	-p4-v3 : 11476 bytes

O arquivo v1 é maior pq possui a biblioteca compilada com ele. O arquivos v2 é menor que o v1, 
pois ele foi compilado estaticamente, apenas com as funções utilizadas. Ou seja, o binário dele 
possui apenas menção para a função foo, enquanto o v1 possui menção a foo e bar. Por fim o v3 é 
o menor de todos, pois referencia a biblioteca dinamicamente. Desse modo, ele não tem as funções 
carregadas nele.


"
             c) Inspect all the programs with 'nm <program>' and discuss the
                differences in when and how the symbols 'foo' and 'bar' are
                listed. Tip, read the 'man page' of 'nm' and interpret the
                letters in the second column. Explain it didactically.
										"

c) Em primeira análise, é possível perceber que apenas o código v1 possui uma menção a "bar".
Isso é esperado, pois apenas ele possui as 2 funções compiladas com ele. Os códigos v2 e 
v3 possuem apenas menções para "foo".

Segue as letras da segunda coluna de cada programa:
	-v1 - Bar e Foo são listados com a letra T. Isso significa que ele é capaz de indetificar
		o código em texto das funções. Isso é esperado, pois ele foi compilado junto da
		biblioteca.

	-v2 - Apenas possui a menção a Foo, a letra utilizada também é T. Isso é esperado, pois
		apesar de ser compilado estaticamente, ele apenas guardou a função utilizada na
		main.
	
	-v3 - Apenas possui menção a Foo, porém a letra utilizada é U. Essa letra significa 
		undefined. Isso ocorre, pois, apesar de ter menção a função foo, o código em
		texto está apenas presenta na biblioteca .so

				
"
	d) Inspect all the programs with 'readelf -d <program>' and discuss
                the differences in the library information. How the 'Shared
                library' field is used by the kernel when 'p4-v3' is loaded?
										"

d) Ambos os programas v1 e v2 possuem apenas menção a biblioteca interna que foi compilada com 
eles: "libc.so.6". Já o programa v3, possui também a menção de qual é o arquivo orginial da 
biblioteca: "[libp4.so]". Além disso, ele tem menção a rota da biblioteca, para ser capaz de 
encontrá-la: "[$ORIGIN]".


"
	e) Discuss the pros and cons of both static and dynamic libraries
                in scenarios such as a) the executable program should be
                installed in other hosts; b) the library is updated; c) the
                library should be used by many different programs running in
                the same host.
										"
e)
	a)
		Estática:
		-Vantagens: 
			- Não existe dependência externa;
			- Entrega (deployment) mais fácil.

		-Desvantagens:	
			- Arquivos maiores;
			- Dificuldade de dar update.

        	Dinâmica:
                -Vantagens:
			- Executáveis menores;
			- Bibliotecas podem receber updates a parte.

                -Desvantagens:  
			- Necessidade de maior cuidado no versionamento das bibliotecas no sistema
			alvo;
			- Possíveis erros de Runtime.

	b)
		Estática:
                -Vantagens:
			- Executáveis já existentes não são afetados, o que pode evitar erros.

                -Desvantagens:  
			- Os programas precisam ser recompilados para receberem o update.

        	Dinâmica:
                -Vantagens:
			- Facilidade nos updates.

                -Desvantagens:
			- Necessidade de tomar cuida com compatibilidade para versões anteriores.

	c)
		Estática:
                -Vantagens:
			- Cada programa tem apenas o código que precisa;
			- Sem necessidade de compartilhar dependências durante o Runtime.

                -Desvantagens:  
			- Rendundância de código;
			- Desperdício de recursos.

        	Dinâmica:
                -Vantagens:
			- Economia de memória;
			- Manutenção centralizada.		

                -Desvantagens:
			- Necessidade de maior cuidado com compatibilidade.




*Exercício 05*

dyn


"
	Explain the differences between

                a) static library
                b) dynamic library with relocatable code
                c) dynamic library with position-independent-code
									"

a) Uma biblioteca estática é um grupo de objetos que são carregados e linkados a um programa 
durante a compilação do mesmo. Dessa forma, eles se tornam apenas um executál, sem dependências 
externas. Normalmente, eles vem nos formatos .lib, para windows, e .a, para linux.

b) Uma bilioteca compartilhada, que precisa ser enxergada/estar na mesma pasta do código principal.
Normalmente nos formatos .so e .dll.

c) Uma biblioteca compartilhada que foi compilada com PIC (position-independent-code). Essa ferramenta
flexibiliza a criação de códigos com dependência de bibliotecas, através da utilização de uma tabela
para acessar as funções (Global Offset Table).

"
	What are the advantages and disadvantages of each one?
									"

a)
	Vantagens:
		- Excução mais rápida;
		- Entrega (deployment) mais simples.
	
	Desvantagens:
		- Executável maior;
		- Mais complicado de atualizar(recompilação).

b)
	Vantagens:
		- Executáveis menores;
		- Facilidade de compartilhamento de código.

	Desvantagens:
		- Necessidade das localizações fixas das libs;
		- Repercussões de segurança (endereços fixos).

c)
	Vantagens:
		- Melhor performance;
		- Melhor segurança;

	Desvantagens:
		- Mais complexo de implementar.
